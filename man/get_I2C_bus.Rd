% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature-I2C-bus.R
\name{get_I2C_bus}
\alias{get_I2C_bus}
\alias{set_I2C_bus}
\title{Talk to "I2C bus"}
\usage{
get_I2C_bus(I2C.bus.wrapper, I2C.address, num.bytes)

set_I2C_bus(I2C.bus.wrapper, I2C.address, num.bytes, message)
}
\arguments{
\item{I2C.bus.wrapper}{feature wrapper as returned by function
\code{rOmniDriver::get_feature_controller_I2C_bus}}

\item{I2C.address}{byte, address to select device in I2C bus.}

\item{num.bytes}{numeric Number of bytes to be transferred or read, 1..61.}

\item{message}{byte, array of bytes with maximum length of 61.}
}
\value{
The result Array of bytes containing the read data. May be null.

The result of the write to the I2C device.
}
\description{
Send a packet of bytes over the I2C bus and read the result, or simply
read from an address.
}
\details{
Several spectrometers have an I2C bus accesible through the auxiliary 
connector which can be used to control accessories. The I2C bus in Ocean
Insight spectrometers is not intended to be used to control the spectrometer
or retrieve data but instead to control and access other accessories with
the spectrometer acting as middle man.

Function \code{get_I2C_bus()} performs a general purpose read on the I2C
pins for interfacing to attached peripherals. The time to complete the
command is determined by the amount of data transferred and the response time
of the peripheral. The I2C bus runs at 400KHz. The maximum number of bytes
that can be read is 61.

Function \code{set_I2C_bus()} performs a general-purpose write on the I2C
pins for interfacing to attached peripherals. The time to complete the
command is determined by the amount of data transferred and the response time
of the peripheral. The I2C bus runs at 400KHz.
}
\seealso{
Other Spectrometer I2C- and SPI-bus functions.: 
\code{\link{get_SPI_bytes}()},
\code{\link{get_feature_I2C_bus}()},
\code{\link{get_feature_SPI_bus}()},
\code{\link{is_feature_supported_I2C_bus}()},
\code{\link{is_feature_supported_SPI_bus}()}
}
\concept{Spectrometer I2C- and SPI-bus functions.}
